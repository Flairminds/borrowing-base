from datetime import datetime, timezone
import json
from flask_sqlalchemy import SQLAlchemy
from sqlalchemy import Identity, text, Text
from sqlalchemy.dialects.postgresql import ARRAY
from sqlalchemy.orm import relationship

db = SQLAlchemy()


class BaseDataFile(db.Model):
    id = db.Column(
        db.Integer, Identity(start=1, cycle=True), primary_key=True, autoincrement=True
    )
    user_id = db.Column(db.Integer)
    file_name = db.Column(db.String)
    closing_date = db.Column(db.Date)
    fund_type = db.Column(db.String)
    # file_data = db.Column(db.JSON, nullable=False)
    # response = db.Column(db.JSON)

    file_data = db.Column(db.PickleType, nullable=False)
    response = db.Column(db.PickleType)
    intermediate_calculation = db.Column(db.PickleType)
    created_at = db.Column(db.DateTime, default=datetime.now(timezone.utc))
    updated_at = db.Column(db.DateTime, default=datetime.now(timezone.utc))
    included_excluded_assets_map = db.Column(db.JSON, nullable=False)

    # one to many relationship with WhatIfAnalysis
    what_if_analyses = relationship("WhatIfAnalysis", back_populates="base_data_file")

    # One to many relationship with ModifiedBaseDataFile
    modified_base_data_files = relationship(
        "ModifiedBaseDataFile", back_populates="base_data_file"
    )


class WhatIfAnalysis(db.Model):
    id = db.Column(
        db.Integer, Identity(start=1, cycle=True), primary_key=True, autoincrement=True
    )
    base_data_file_id = db.Column(
        db.Integer, db.ForeignKey("base_data_file.id"), nullable=False
    )
    simulation_name = db.Column(db.String, nullable=False)
    initial_data = db.Column(db.PickleType, nullable=False)
    updated_data = db.Column(db.PickleType, nullable=False)
    intermediate_metrics_data = db.Column(db.PickleType, nullable=False)
    response = db.Column(db.PickleType, nullable=False)
    created_at = db.Column(db.DateTime, default=datetime.now(timezone.utc))
    updated_at = db.Column(db.DateTime, default=datetime.now(timezone.utc))
    note = db.Column(db.String)
    is_saved = db.Column(db.Boolean, default=False)
    simulation_type = db.Column(db.String, nullable=False)

    # many to one relationship with BaseDataFile
    base_data_file = db.relationship("BaseDataFile", back_populates="what_if_analyses")


class WiaRefSheets(db.Model):
    id = db.Column(
        db.Integer, Identity(start=1, cycle=True), primary_key=True, autoincrement=True
    )
    user_id = db.Column(db.Integer, nullable=False)
    ref_file_name = db.Column(db.String, nullable=False)
    sheet_data = db.Column(db.PickleType, nullable=False)
    created_at = db.Column(db.DateTime, default=datetime.now(timezone.utc))
    updated_at = db.Column(db.DateTime, default=datetime.now(timezone.utc))


class UserConfig(db.Model):
    id = db.Column(
        db.Integer, Identity(start=1, cycle=True), primary_key=True, autoincrement=True
    )
    user_id = db.Column(db.Integer, nullable=False)

    assets_selection_columns = db.Column(
        db.JSON,
        default=json.dumps(
            [
                "Investment Name",
                "Investment Investment Type",
                "Investment Par",
                "Investment Industry",
                "Investment Closing Date",
            ]
        ),
    )

    response_format = db.Column(db.String, default="numerize")


class ModifiedBaseDataFile(db.Model):
    id = db.Column(
        db.Integer, Identity(start=1, cycle=True), primary_key=True, autoincrement=True
    )
    base_data_file_id = db.Column(
        db.Integer, db.ForeignKey("base_data_file.id"), nullable=False
    )
    simulation_name = db.Column(db.String, nullable=False)
    initial_data = db.Column(db.PickleType, nullable=False)
    modified_data = db.Column(db.PickleType, nullable=False)
    changes = db.Column(db.JSON)
    intermediate_metrics_data = db.Column(db.PickleType)
    response = db.Column(db.PickleType)
    created_at = db.Column(db.DateTime, default=datetime.now(timezone.utc))
    updated_at = db.Column(db.DateTime, default=datetime.now(timezone.utc))
    note = db.Column(db.String)
    simulation_type = db.Column(db.String, default="Update asset")
    is_saved = db.Column(db.Boolean, default=False)

    # Many to one relationship with BaseDataFile
    base_data_file = db.relationship(
        "BaseDataFile", back_populates="modified_base_data_files"
    )


class FundConcentrationTest(db.Model):
    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    fund_id = db.Column(db.Integer, db.ForeignKey("fund.id"), nullable=False)
    test_id = db.Column(
        db.Integer, db.ForeignKey("concentration_test.id"), nullable=False
    )
    limit_percentage = db.Column(db.Float, nullable=False)
    show_on_dashboard = db.Column(db.Boolean, default=False)
    created_at = db.Column(db.DateTime(timezone=True), server_default=db.func.now())
    modified_at = db.Column(db.DateTime(timezone=True))

    # Relationships
    fund = db.relationship("Fund", back_populates="concentration_tests")
    concentration_test = db.relationship("ConcentrationTest", back_populates="funds")


class ConcentrationTest(db.Model):
    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    test_name = db.Column(db.String(100), nullable=False)
    description = db.Column(db.String(255))
    mathematical_formula = db.Column(db.String(255))
    columns = db.Column(db.JSON, nullable=True)
    ct_code = db.Column(db.String(15), unique=True)
    unit = db.Column(db.String(15), server_default='percentage')
    data_type = db.Column(db.String(15), server_default='integer')
    default_value = db.Column(db.Integer, server_default=db.text("0"))
    eligible_funds = db.Column(db.ARRAY(db.String))
    created_at = db.Column(db.DateTime(timezone=True), server_default=db.func.now())
    modified_at = db.Column(db.DateTime(timezone=True))

    # Many-to-many relationship
    funds = db.relationship(
        "FundConcentrationTest", back_populates="concentration_test"
    )


class Fund(db.Model):
    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    fund_name = db.Column(db.String(100), nullable=False)

    # Many-to-many relationship
    concentration_tests = db.relationship(
        "FundConcentrationTest", back_populates="fund"
    )


class SourceFiles(db.Model):
    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    file_name = db.Column(db.String(100), nullable=False)
    extension = db.Column(db.String(100), nullable=False)
    report_date = db.Column(db.DateTime(timezone=True))
    file_url = db.Column(db.String(200), nullable=False)
    file_size = db.Column(db.Float, nullable=False)
    company_id = db.Column(db.Integer, nullable=False)
    fund_types = db.Column(db.ARRAY(db.String), nullable=True)
    is_validated = db.Column(db.Boolean, default=False)
    is_extracted = db.Column(db.Boolean, default=False)
    extraction_status = db.Column(db.String(100))
    uploaded_at = db.Column(db.DateTime(timezone=True), server_default=db.func.now())
    modified_at = db.Column(db.DateTime(timezone=True))
    uploaded_by = db.Column(db.Integer, nullable=False)
    is_deleted = db.Column(db.Boolean, default=False)
    file_type = db.Column(db.String(100))
    is_archived = db.Column(db.Boolean, default=False)

class SheetMetadataMaster(db.Model):
    smm_id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    fund_id = db.Column(db.Integer, db.ForeignKey("fund.id"), nullable=False)
    company_id = db.Column(db.Integer, nullable=False)
    name = db.Column(db.String(255), nullable=False)
    lookup = db.Column(db.String(127), nullable=False, unique=True)
    aliases = db.Column(db.ARRAY(db.String))
    data_format = db.Column(db.String(511), server_default='tabular')
    description = db.Column(db.String(511))
    sequence = db.Column(db.Integer)
    is_raw_data_input = db.Column(db.Boolean, default=False)
    is_base_data_input = db.Column(db.Boolean, default=False)
    is_output = db.Column(db.Boolean, default=False)
    is_intermediate = db.Column(db.Boolean, default=False)
    is_mandatory = db.Column(db.Boolean, default=False)
    is_required = db.Column(db.Boolean, default=False)    
    created_by = db.Column(db.Integer)
    created_at = db.Column(db.DateTime(timezone=True), server_default=db.func.now())
    modified_by = db.Column(db.Integer)
    modified_at = db.Column(db.DateTime(timezone=True))

class ColumnMetadataMaster(db.Model):
    cmm_id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    fund_id = db.Column(db.Integer, db.ForeignKey("fund.id"), nullable=False)
    sheet_id = db.Column(db.Integer, db.ForeignKey("sheet_metadata_master.smm_id"), nullable=False)
    company_id = db.Column(db.Integer, nullable=False)
    column_name = db.Column(db.String(255), nullable=False)
    column_lookup = db.Column(db.String(127), nullable=False, unique=True)
    column_aliases = db.Column(db.ARRAY(db.String))
    description = db.Column(db.String(511))
    calculation_formula = db.Column(db.String(511))
    data_type = db.Column(db.String(15))
    unit = db.Column(db.String(31))
    sequence = db.Column(db.Integer)
    is_raw_data_input = db.Column(db.Boolean, default=False)
    is_base_data_input = db.Column(db.Boolean, default=False)
    is_output = db.Column(db.Boolean, default=False)
    is_intermediate = db.Column(db.Boolean, default=False)
    is_index_column = db.Column(db.Boolean, default=False)
    is_mandatory = db.Column(db.Boolean, default=False)
    is_required = db.Column(db.Boolean, default=False)    
    created_by = db.Column(db.Integer)
    created_at = db.Column(db.DateTime(timezone=True), server_default=db.func.now())
    modified_by = db.Column(db.Integer)
    modified_at = db.Column(db.DateTime(timezone=True))

class PfltHaircutConfig(db.Model):
    hc_id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    fund_type = db.Column(db.String(15), nullable=False)
    company_id = db.Column(db.Integer, nullable=False)
    haircut_level = db.Column(db.String(127), nullable=False)
    obligor_tier = db.Column(db.String(127), nullable=False)
    position = db.Column(db.String(127), nullable=False)
    value = db.Column(db.Float, nullable=False)
    description = db.Column(db.String(255))
    created_by = db.Column(db.Integer, nullable=False)
    created_at = db.Column(db.DateTime(timezone=True), server_default=db.func.now())
    modified_by = db.Column(db.Integer, nullable=True)
    modified_at = db.Column(db.DateTime(timezone=True))

class PfltIndustryList(db.Model):
    il_id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    fund_type = db.Column(db.String(15), nullable=False)
    company_id = db.Column(db.Integer, nullable=False)
    industry_no = db.Column(db.Integer, nullable=False)
    industry_name = db.Column(db.String(255), nullable=False)
    industry_code = db.Column(db.String(127))
    description = db.Column(db.String(255))
    created_by = db.Column(db.Integer, nullable=False)
    created_at = db.Column(db.DateTime(timezone=True), server_default=db.func.now())
    modified_by = db.Column(db.Integer, nullable=True)
    modified_at = db.Column(db.DateTime(timezone=True))

class Companies(db.Model):
    company_id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    company_name = db.Column(db.String(255), nullable=False)
    admin_id = db.Column(db.Integer, nullable=True)
    created_by = db.Column(db.Integer, nullable=False)
    created_at = db.Column(db.DateTime(timezone=True), server_default=db.func.now())
    modified_by = db.Column(db.Integer, nullable=True)
    modified_at = db.Column(db.DateTime(timezone=True))

class Users(db.Model):
    user_id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    username = db.Column(db.String(255), nullable=False)
    password = db.Column(db.String, nullable=True)
    display_name = db.Column(db.String(255), nullable=True)
    email = db.Column(db.String, nullable=True)
    company_id = db.Column(db.Integer, db.ForeignKey("companies.company_id"), nullable=False)
    created_by = db.Column(db.Integer, nullable=False)
    created_at = db.Column(db.DateTime(timezone=True), server_default=db.func.now())
    modified_by = db.Column(db.Integer, nullable=True)
    modified_at = db.Column(db.DateTime(timezone=True))

class ExtractedBaseDataInfo(db.Model):
    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    report_date = report_date = db.Column(db.DateTime(timezone=True))
    fund_type = db.Column(db.String(15), nullable=False)
    status = db.Column(db.String, nullable=False)
    company_id = db.Column(db.Integer, db.ForeignKey("companies.company_id"), nullable=False)
    files = db.Column(db.ARRAY(db.Integer))
    extraction_date = db.Column(db.DateTime(timezone=True), server_default=db.func.now())
    failure_comments = db.Column(db.String)
    user_comments = db.Column(db.String)
    description = db.Column(db.String)
    is_deleted = db.Column(db.Boolean, default=False)

class PfltSecurityMapping(db.Model):
    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    company_id = db.Column(db.Integer, db.ForeignKey("companies.company_id"), nullable=True)
    soi_name = db.Column(db.String)
    master_comp_security_name = db.Column(db.String)
    family_name = db.Column(db.String)
    security_type = db.Column(db.String)
    cashfile_security_name = db.Column(db.String)
    created_by = db.Column(db.Integer, nullable=True)
    created_at = db.Column(db.DateTime(timezone=True), server_default=db.func.now())
    modified_by = db.Column(db.Integer, nullable=True)
    modified_at = db.Column(db.DateTime(timezone=True))

class BaseDataMapping(db.Model):
    bdm_id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    fund_type = db.Column(db.String(15), nullable=False)
    company_id = db.Column(db.Integer, db.ForeignKey("companies.company_id"), nullable=False)
    bd_sheet_name = db.Column(db.String(255), nullable=False)
    bd_column_name = db.Column(db.String(255), nullable=False)
    bd_column_lookup = db.Column(db.String(255), nullable=True)
    bd_column_datatype = db.Column(db.String(255), nullable=True)
    bd_column_is_required = db.Column(db.Boolean, default=False)
    bd_column_unit = db.Column(db.String)
    sf_file_type = db.Column(db.String(255))
    sf_sheet_name = db.Column(db.String(255))
    sf_column_name = db.Column(db.String)
    sf_column_lookup = db.Column(db.String(255))
    sf_column_datatype = db.Column(db.String(255))
    sf_column_categories = db.Column(db.ARRAY(db.String))
    sd_ref_table_name = db.Column(db.String)
    formula = db.Column(db.String)
    description = db.Column(db.String)
    comments = db.Column(db.String)
    created_by = db.Column(db.Integer, nullable=True)
    created_at = db.Column(db.DateTime(timezone=True), server_default=db.func.now())
    modified_by = db.Column(db.Integer, nullable=True)
    modified_at = db.Column(db.DateTime(timezone=True))
    is_editable = db.Column(db.Boolean, server_default=db.sql.expression.false())

class BaseDataMappingColumnInfo(db.Model):
    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    fund_type = db.Column(db.String(15), nullable=False)
    company_id = db.Column(db.Integer, db.ForeignKey("companies.company_id"))
    bdm_id = db.Column(db.Integer, db.ForeignKey("base_data_mapping.bdm_id"), nullable=False)
    sequence = db.Column(db.Integer, nullable=False)
    modified_at = db.Column(db.DateTime(timezone=True))
    modified_by = db.Column(db.Integer, nullable=True)
    is_selected = db.Column(db.Boolean, server_default=db.sql.expression.false())

class PfltBaseData(db.Model):
    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    base_data_info_id = db.Column(db.Integer, db.ForeignKey("extracted_base_data_info.id"), nullable=True)
    company_id = db.Column(db.Integer, db.ForeignKey("companies.company_id"), nullable=True)
    report_date = db.Column(db.DateTime(timezone=True))
    created_by = db.Column(db.Integer, nullable=True)
    created_at = db.Column(db.DateTime(timezone=True), server_default=db.func.now())
    modified_by = db.Column(db.Integer, nullable=True)
    modified_at = db.Column(db.DateTime(timezone=True))
    obligor_name = db.Column(db.String)
    security_name = db.Column(db.String)
    purchase_date = db.Column(db.String)
    total_commitment = db.Column(db.String)
    outstanding_principal = db.Column(db.String)
    defaulted_collateral_loan = db.Column(db.String)
    credit_improved_loan = db.Column(db.String)
    purchase_price = db.Column(db.String)
    stretch_senior_loan = db.Column(db.String)
    loan_type = db.Column(db.String)
    current_moodys_rating = db.Column(db.String)
    current_sp_rating = db.Column(db.String)
    initial_fixed_charge_coverage_ratio = db.Column(db.String)
    date_of_default = db.Column(db.String)
    market_value = db.Column(db.String)
    current_fixed_charge_coverage_ratio = db.Column(db.String)
    current_interest_coverage_ratio = db.Column(db.String)
    initial_interest_coverage_ratio = db.Column(db.String)
    initial_debt_to_capitalization_ratio = db.Column(db.String)
    initial_senior_debt_ebitda = db.Column(db.String)
    initial_total_debt_ebitda = db.Column(db.String)
    current_senior_debt_ebitda = db.Column(db.String)
    current_total_debt_ebitda = db.Column(db.String)
    initial_ttm_ebitda = db.Column(db.String)
    current_ttm_ebitda = db.Column(db.String)
    current_as_of_date = db.Column(db.String)
    maturity_date = db.Column(db.String)
    fixed_rate = db.Column(db.String)
    coupon_incl_pik_pikable = db.Column(db.String)
    floor_obligation = db.Column(db.String)
    floor = db.Column(db.String)
    spread_incl_pik_pikable = db.Column(db.String)
    base_rate = db.Column(db.String)
    for_unused_fee = db.Column(db.String)
    pik_pikable_for_floating_rate_loans = db.Column(db.String)
    pik_pikable_for_fixed_rate_loans = db.Column(db.String)
    interest_paid = db.Column(db.String)
    obligor_industry = db.Column(db.String)
    currency = db.Column(db.String)
    obligor_country = db.Column(db.String)
    dip_loan = db.Column(db.String)
    lbo_loan = db.Column(db.String)
    warrants_to_purchase_equity = db.Column(db.String)
    participation = db.Column(db.String)
    convertible_to_equity = db.Column(db.String)
    equity_security = db.Column(db.String)
    at_acquisition_offer_or_redemption = db.Column(db.String)
    margin_stock = db.Column(db.String)
    subject_to_withholding_tax = db.Column(db.String)
    at_acquisition_defaulted_loan = db.Column(db.String)
    zero_coupon_obligation = db.Column(db.String)
    covenant_lite = db.Column(db.String)
    eligible_covenant_lite = db.Column(db.String)
    lien_type = db.Column(db.String)
    structured_finance_obligation = db.Column(db.String)
    material_non_credit_related_risk = db.Column(db.String)
    primarily_secured_by_real_estate_or_loan = db.Column(db.String)
    interest_only_security = db.Column(db.String)
    satisfies_all_other_eligibility_criteria = db.Column(db.String)
    excess_concentration_amount = db.Column(db.String)
    loanx_id = db.Column(db.String)

class BaseDataOtherInfo(db.Model):
    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    company_id = db.Column(db.Integer, db.ForeignKey("companies.company_id"))
    extraction_info_id = db.Column(db.Integer, db.ForeignKey("extracted_base_data_info.id"), nullable=True)
    determination_date = db.Column(db.String(255))
    fund_type = db.Column(db.String(255))
    other_info_list = db.Column(db.JSON, nullable=True)
    created_at = db.Column(db.DateTime(timezone=True), server_default=db.func.now())
    modified_by = db.Column(db.Integer, nullable=True)
    modified_at = db.Column(db.DateTime(timezone=True))
    is_editable = db.Column(db.Boolean, server_default=db.sql.expression.true())

class PfltBaseDataHistory(db.Model):
    operation = db.Column(db.String)
    done_at = db.Column(db.DateTime(timezone=True), server_default=db.func.now())
    pflt_bdh_id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    id = db.Column(db.Integer)
    base_data_info_id = db.Column(db.Integer)
    company_id = db.Column(db.Integer)
    report_date = db.Column(db.DateTime(timezone=True))
    created_by = db.Column(db.Integer, nullable=True)
    created_at = db.Column(db.DateTime(timezone=True))
    modified_by = db.Column(db.Integer, nullable=True)
    modified_at = db.Column(db.DateTime(timezone=True))
    obligor_name = db.Column(db.String)
    security_name = db.Column(db.String)
    purchase_date = db.Column(db.String)
    total_commitment = db.Column(db.String)
    outstanding_principal = db.Column(db.String)
    defaulted_collateral_loan = db.Column(db.String)
    credit_improved_loan = db.Column(db.String)
    purchase_price = db.Column(db.String)
    stretch_senior_loan = db.Column(db.String)
    loan_type = db.Column(db.String)
    current_moodys_rating = db.Column(db.String)
    current_sp_rating = db.Column(db.String)
    initial_fixed_charge_coverage_ratio = db.Column(db.String)
    date_of_default = db.Column(db.String)
    market_value = db.Column(db.String)
    current_fixed_charge_coverage_ratio = db.Column(db.String)
    current_interest_coverage_ratio = db.Column(db.String)
    initial_interest_coverage_ratio = db.Column(db.String)
    initial_debt_to_capitalization_ratio = db.Column(db.String)
    initial_senior_debt_ebitda = db.Column(db.String)
    initial_total_debt_ebitda = db.Column(db.String)
    current_senior_debt_ebitda = db.Column(db.String)
    current_total_debt_ebitda = db.Column(db.String)
    initial_ttm_ebitda = db.Column(db.String)
    current_ttm_ebitda = db.Column(db.String)
    current_as_of_date = db.Column(db.String)
    maturity_date = db.Column(db.String)
    fixed_rate = db.Column(db.String)
    coupon_incl_pik_pikable = db.Column(db.String)
    floor_obligation = db.Column(db.String)
    floor = db.Column(db.String)
    spread_incl_pik_pikable = db.Column(db.String)
    base_rate = db.Column(db.String)
    for_unused_fee = db.Column(db.String)
    pik_pikable_for_floating_rate_loans = db.Column(db.String)
    pik_pikable_for_fixed_rate_loans = db.Column(db.String)
    interest_paid = db.Column(db.String)
    obligor_industry = db.Column(db.String)
    currency = db.Column(db.String)
    obligor_country = db.Column(db.String)
    dip_loan = db.Column(db.String)
    lbo_loan = db.Column(db.String)
    warrants_to_purchase_equity = db.Column(db.String)
    participation = db.Column(db.String)
    convertible_to_equity = db.Column(db.String)
    equity_security = db.Column(db.String)
    at_acquisition_offer_or_redemption = db.Column(db.String)
    margin_stock = db.Column(db.String)
    subject_to_withholding_tax = db.Column(db.String)
    at_acquisition_defaulted_loan = db.Column(db.String)
    zero_coupon_obligation = db.Column(db.String)
    covenant_lite = db.Column(db.String)
    eligible_covenant_lite = db.Column(db.String)
    lien_type = db.Column(db.String)
    structured_finance_obligation = db.Column(db.String)
    material_non_credit_related_risk = db.Column(db.String)
    primarily_secured_by_real_estate_or_loan = db.Column(db.String)
    interest_only_security = db.Column(db.String)
    satisfies_all_other_eligibility_criteria = db.Column(db.String)
    excess_concentration_amount = db.Column(db.String)
    loanx_id = db.Column(db.String)

class PcofBaseData(db.Model):
    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    base_data_info_id = db.Column(db.Integer, db.ForeignKey("extracted_base_data_info.id"), nullable=True)
    company_id = db.Column(db.Integer, db.ForeignKey("companies.company_id"), nullable=True)
    report_date = db.Column(db.DateTime(timezone=True))
    created_by = db.Column(db.Integer, nullable=True)
    created_at = db.Column(db.DateTime(timezone=True), server_default=db.func.now())
    modified_by = db.Column(db.Integer, nullable=True)
    modified_at = db.Column(db.DateTime(timezone=True))
    investment_name = db.Column(db.String)
    issuer = db.Column(db.String)
    leverage_ltv_thru_pcof_iv = db.Column(db.String)
    classifications_quoted_unquoted = db.Column(db.String)
    classifications_warehouse_asset = db.Column(db.String)
    classifications_warehouse_asset_expected_rating = db.Column(db.String)
    classifications_approved_foreign_jurisdiction = db.Column(db.String)
    classifications_ltv_transaction = db.Column(db.String)
    Classifications_noteless_assigned_loan = db.Column(db.String)
    classifications_undelivered_note = db.Column(db.String)
    classifications_structured_finance_obligation = db.Column(db.String)
    classifications_third_party_finance_company = db.Column(db.String)
    classifications_affiliate_investment = db.Column(db.String)
    classifications_defaulted_restructured = db.Column(db.String)
    leverage_total_capitalization = db.Column(db.String)
    investment_closing_date = db.Column(db.DateTime)
    investment_investment_type = db.Column(db.String)
    investment_industry = db.Column(db.String)
    investment_maturity = db.Column(db.String)
    rates_fixed_coupon = db.Column(db.String)
    rates_floating_cash_spread = db.Column(db.String)
    rates_current_lobor_floor = db.Column(db.String)
    rates_fixed_floating = db.Column(db.String)
    classifications_noteless_assigned_loan = db.Column(db.String)
    financials_ltm_revenue_mms = db.Column(db.String)
    financials_ltm_ebitda_mms = db.Column(db.String)
    leverage_total_enterprise_value = db.Column(db.String)
    leverage_total_leverage = db.Column(db.String)
    leverage_pcof_iv_leverage = db.Column(db.String)
    investment_par = db.Column(db.String)
    investment_cost = db.Column(db.String)
    investment_external_valuation = db.Column(db.String)
    investment_internal_valuation = db.Column(db.String)
    rates_pik = db.Column(db.String)
    classifications_warehouse_asset_inclusion_date = db.Column(db.String)
    leverage_revolver_commitment = db.Column(db.String)
    leverage_attachment_point = db.Column(db.String)
    final_eligibility_override = db.Column(db.String)
    final_comment = db.Column(db.String)
    concentration_adjustment = db.Column(db.String)
    concentration_comment = db.Column(db.String)
    borrowing_base_other_adjustment = db.Column(db.String)
    borrowing_base_industry_concentration = db.Column(db.String)
    borrowing_base_comment = db.Column(db.String)
    is_eligible_issuer = db.Column(db.String)

class PcofBaseDataHistory(db.Model):
    operation = db.Column(db.String)
    done_at = db.Column(db.DateTime(timezone=True), server_default=db.func.now())
    pcof_bdh_id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    id = db.Column(db.Integer)
    base_data_info_id = db.Column(db.Integer)
    company_id = db.Column(db.Integer)
    report_date = db.Column(db.DateTime(timezone=True))
    created_by = db.Column(db.Integer, nullable=True)
    created_at = db.Column(db.DateTime(timezone=True))
    modified_by = db.Column(db.Integer, nullable=True)
    modified_at = db.Column(db.DateTime(timezone=True))
    investment_name = db.Column(db.String)
    issuer = db.Column(db.String)
    leverage_ltv_thru_pcof_iv = db.Column(db.String)
    classifications_quoted_unquoted = db.Column(db.String)
    classifications_warehouse_asset = db.Column(db.String)
    classifications_warehouse_asset_expected_rating = db.Column(db.String)
    classifications_approved_foreign_jurisdiction = db.Column(db.String)
    classifications_ltv_transaction = db.Column(db.String)
    Classifications_noteless_assigned_loan = db.Column(db.String)
    classifications_undelivered_note = db.Column(db.String)
    classifications_structured_finance_obligation = db.Column(db.String)
    classifications_third_party_finance_company = db.Column(db.String)
    classifications_affiliate_investment = db.Column(db.String)
    classifications_defaulted_restructured = db.Column(db.String)
    leverage_total_capitalization = db.Column(db.String)
    investment_closing_date = db.Column(db.DateTime)
    investment_investment_type = db.Column(db.String)
    investment_industry = db.Column(db.String)
    investment_maturity = db.Column(db.String)
    rates_fixed_coupon = db.Column(db.String)
    rates_floating_cash_spread = db.Column(db.String)
    rates_current_lobor_floor = db.Column(db.String)
    rates_fixed_floating = db.Column(db.String)
    classifications_noteless_assigned_loan = db.Column(db.String)
    financials_ltm_revenue_mms = db.Column(db.String)
    financials_ltm_ebitda_mms = db.Column(db.String)
    leverage_total_enterprise_value = db.Column(db.String)
    leverage_total_leverage = db.Column(db.String)
    leverage_pcof_iv_leverage = db.Column(db.String)
    investment_par = db.Column(db.String)
    investment_cost = db.Column(db.String)
    investment_external_valuation = db.Column(db.String)
    investment_internal_valuation = db.Column(db.String)
    rates_pik = db.Column(db.String)
    classifications_warehouse_asset_inclusion_date = db.Column(db.String)
    leverage_revolver_commitment = db.Column(db.String)
    leverage_attachment_point = db.Column(db.String)
    final_eligibility_override = db.Column(db.String)
    final_comment = db.Column(db.String)
    concentration_adjustment = db.Column(db.String)
    concentration_comment = db.Column(db.String)
    borrowing_base_other_adjustment = db.Column(db.String)
    borrowing_base_industry_concentration = db.Column(db.String)
    borrowing_base_comment = db.Column(db.String)
    is_eligible_issuer = db.Column(db.String)